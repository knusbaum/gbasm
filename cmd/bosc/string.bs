package string

// Parameters to functions are passed in the registers rdi, rsi, rdx, rcx, r8, r9
// Functions preserve the registers rbx, rsp, rbp, r12, r13, r14, and r15; 
// while rax, rdi, rsi, rdx, rcx, r8, r9, r10, r11 are scratch registers. 
function strlen
	type fn(str) num
	prologue
	//mov rax 0
	//mov [rax] 0
	mov rax -1
	dec rdi
label loop
	inc rax
	inc rdi
	cmp [rdi] 0
	jne loop

	epilogue
	ret

// Countdigits does not work for negative numbers.
// Instead we convert negative numbers to positive numbers,
// call ucountdigits and add 1 for the negative sign.
// // countdigits(i int64) -> int64 
// // determines the minimum number of characters needed to
// // represent the integer i
// function countdigits
// 	prologue
// 	mov rax 0
// 	mov rbx 0
// 	
// label loop
// 	inc rax
// 	imul rbx rbx 10
// 	add rbx 9
// 	cmp rbx rdi
// 	jl loop
// 
// 	epilogue
// 	ret

// ucountdigits(i uint64) -> uint64 
// determines the minimum number of characters needed to
// represent the integer i
function ucountdigits
	// skip prologue and epilogue.
	// We aren't using stack or preserved registers.
	// prologue
	mov rcx 0
	mov rdx 0
	mov rax 0
	mov r8 10
	
label loop
	inc rcx
	mul r8
	add rax 9
	cmp rdx 0
	ja end
	cmp rax rdi
	jb loop
	
label end
	mov rax rcx
	// epilogue
	ret
	

// uitoa(i uint64, b [?]byte)
function uitoa
	// No saved registers used and stack use is trivial.
	// We can skip the prologue.
	//prologue

	// lazy save
	push rdi
	push rsi
	call ucountdigits
	pop rsi
	pop rdi


	// Add countdigits to rsi index so we can 
	// add characters to the array backwards.
	add rsi rax
	mov [rsi] 0
	dec rsi

	// Integer is in rdi
	// Target buffer is in rsi
	mov rax rdi
label loop
	mov rdx 0
	mov rcx 10
	div rcx
	// Remainder (mod) is in rdx
	// quotient remains in rax.
	// mod = mod + '0'
	add rdx 0x30
	mov [rsi] dl
	dec rsi
	test rax rax
	jnz loop
	
	//epilogue
	ret

// function itoa
function itoa
	prologue

	cmp rdi 0
	jge skipconvert
	// convert negative to positive
	neg rdi
	mov [rsi] 0x2d
	inc rsi
	
label skipconvert
	call uitoa

	epilogue
	ret

// putb(i byte)
function putb
	type fn(byte) none
	jmp puti

// puti(i int64)
function puti
	type fn(num) none
	prologue
	sub rsp 22
	mov [rsp+22] 0x00
	mov [rsp+21] 0x00
	
	mov rsi rsp
	call itoa
	
	mov rdi rsp
	call puts
	
	//lea rdi [rsp+21]
	//call puts	
	
	epilogue
	ret

// puti(i uint64)
function uputi
	prologue
	sub rsp 22
	mov [rsp+22] 0x00
	mov [rsp+21] 0x0a
	
	mov rsi rsp
	call uitoa
	
	mov rdi rsp
	call puts
	
	lea rdi [rsp+21]
	call puts	
	
	epilogue
	ret
	
