package main

var hello string "Hello World\n\0"
var fibprint string "Fib was: \0"
var newline string "\n\0"

function main
	// no prologue necessary. 
	// Only modifying rdi and rax (by way of calling fib)
	//lea rax hello
	lea rax hello
	mov [rax+0] 74
	mov rdi rax
	call puts

	// First Fib call
 	mov rdi 20
 	call fib
	push rax

	lea rdi fibprint
	call puts

	pop rdi
	call puti

	lea rdi newline
	call puts

	// Second Fib call
 	mov rdi 20
 	call newfib
	push rax

	lea rdi fibprint
	call puts

	pop rdi
	call puti

	lea rdi newline
	call puts

	// Third Fib call
 	mov rdi 20
 	call bosonfib
	push rax

	lea rdi fibprint
	call puts

	pop rdi
	call puti

	lea rdi newline
	call puts

	mov rdi 1
	mov rsi 2
	mov rdx 3
	mov rcx 4
	mov r8 5
	mov r9 6
	push 8
	push 7
	call argprinter
	add rsp 16

 	mov rax 0
 	ret

function argprinter
	arg one rdi
	arg two rsi
	arg three rdx
	arg four rcx
	arg five r8
	arg six r9
	arg seven 0
	arg eight 1

	prologue

	mov rdi one
	call puti
	lea rdi newline
	call puts

	mov rdi two
	call puti
	lea rdi newline
	call puts

	mov rdi three
	call puti
	lea rdi newline
	call puts

	mov rdi four
	call puti
	lea rdi newline
	call puts

	mov rdi five
	call puti
	lea rdi newline
	call puts

	mov rdi six
	call puti
	lea rdi newline
	call puts

	mov rdi seven
	call puti
	lea rdi newline
	call puts

	mov rdi eight
	call puti
	lea rdi newline
	call puts

	epilogue
	ret


function newfib
	arg n rdi
	local f1 64
	local f2 64
	
	prologue

	cmp n 3	
	jge recur
	mov rax 1
	jmp end

label recur
	mov rdi n
	sub rdi 1
	call fib
	mov f1 rax

	mov rdi n
	sub rdi 2
	call fib
	mov f2 rax

	add f1 f2
	mov rax f1

label end
	epilogue
	ret

function fib
	// Register use declarations
	// These will not be overwritten by the local allocator
	use rdi
	use rax
	// Local variable declaration
	// N is the 64-bit argument to fib (populated from rdi below)
	// f1 will be the 64-bit value of fib(n-1)
	// f2 will be the 64-bit value of fib(n-2)
	local n 64
	local f1 64
	local f2 64

	prologue

	// Argument goes in RDI
	mov n rdi
	
	// Base cases
	cmp n 3
	jge recursive
	mov rax 1
	jmp end

	label recursive
	// f1 = fib(n - 1)
	mov rdi n
	sub rdi 1
	call fib
	mov f1 rax

	// f2 = fib(n - 2)
	mov rdi n
	sub rdi 2
	call fib
	mov f2 rax

	// rax = f1 + f2
	add f1 f2
	mov rax f1
	
	label end
	epilogue
	ret

function bosonfib
	argi n 0

	prologue

	local _T1 64
	mov _T1 n
	cmp _T1 3
	local _T2 8
	setl _T2
	movzx _T1 _T2
	forget _T2
	cmp _T1 0
	forget _T1
	je _LABEL2
	mov rax 1
	jmp _LABEL1
	jmp _LABEL3
	label _LABEL2
	local _T3 64
	evict
	local _T4 64
	mov _T4 n
	sub _T4 1
	mov rdi _T4
	call bosonfib
	mov _T3 rax
	evict
	local _T5 64
	mov _T5 n
	sub _T5 2
	mov rdi _T5
	call bosonfib
	add _T3 rax
	mov rax _T3
	forget _T3
	jmp _LABEL1
	label _LABEL3

	label _LABEL1
	epilogue
	ret
